//
//  ContentView.swift
//  cleaner_ios
//
//  Created by Dmitriy Yankovskiy on 06/09/2025.
//

import SwiftUI
import PhotosUI

struct ContentView: View {
    @State private var selectedImages: [UIImage] = []
    @State private var selectedItems: [PhotosPickerItem] = []
    @StateObject private var embeddingService = ImageEmbeddingService()
    @State private var isGeneratingEmbeddings = false
    @State private var isSearchingSimilar = false
    @State private var similarGroups: [[Int]] = [] // –ì—Ä—É–ø–ø—ã –ø–æ—Ö–æ–∂–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    
    var body: some View {
        ScrollView {
            VStack(spacing: 30) {
                Text("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                    .font(.largeTitle)
                    .fontWeight(.bold)
                    .padding(.top)
                
                // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                PhotosPicker(selection: $selectedItems, maxSelectionCount: 20, matching: .images) {
                    Label("–í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", systemImage: "photo.on.rectangle.angled")
                        .font(.headline)
                        .foregroundColor(.white)
                        .padding()
                        .background(Color.blue)
                        .cornerRadius(10)
                }
                
                if !selectedImages.isEmpty {
                    Text("–í—ã–±—Ä–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: \(selectedImages.count)")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                }
                
                // –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
                if !selectedImages.isEmpty {
                    Button(action: {
                        generateEmbeddings()
                    }) {
                        HStack {
                            if isGeneratingEmbeddings {
                                ProgressView()
                                    .scaleEffect(0.8)
                                    .foregroundColor(.white)
                            }
                            Text(isGeneratingEmbeddings ? "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏..." : "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏")
                        }
                        .font(.headline)
                        .foregroundColor(.white)
                        .padding()
                        .background(embeddingService.embeddings.count == selectedImages.count ? Color.gray : Color.green)
                        .cornerRadius(10)
                    }
                    .disabled(isGeneratingEmbeddings || embeddingService.embeddings.count == selectedImages.count)
                }
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
                if !selectedImages.isEmpty {
                    HStack {
                        Toggle("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é", isOn: $embeddingService.useClustering)
                            .font(.subheadline)
                        
                        Spacer()
                        
                        Text("–ö–ª–∞—Å—Ç–µ—Ä–æ–≤: \(embeddingService.getClusterCount())")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                    .padding()
                    .background(Color.gray.opacity(0.1))
                    .cornerRadius(10)
                }
                
                // –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                if embeddingService.embeddings.count == selectedImages.count && !selectedImages.isEmpty {
                    Button(action: {
                        findSimilarImages()
                    }) {
                        HStack {
                            if isSearchingSimilar {
                                ProgressView()
                                    .scaleEffect(0.8)
                                    .foregroundColor(.white)
                            }
                            Text(isSearchingSimilar ? "–ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ..." : "–ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                        }
                        .font(.headline)
                        .foregroundColor(.white)
                        .padding()
                        .background(Color.orange)
                        .cornerRadius(10)
                    }
                    .disabled(isSearchingSimilar)
                }
                
                // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä—É–ø–ø –ø–æ—Ö–æ–∂–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                if !similarGroups.isEmpty {
                    VStack(spacing: 20) {
                        Text("–ü–æ—Ö–æ–∂–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                            .font(.headline)
                            .padding(.top)
                        
                        ForEach(Array(similarGroups.enumerated()), id: \.offset) { groupIndex, group in
                            VStack(alignment: .leading, spacing: 10) {
                                Text("–ì—Ä—É–ø–ø–∞ \(groupIndex + 1)")
                                    .font(.subheadline)
                                    .fontWeight(.semibold)
                                
                                ScrollView(.horizontal, showsIndicators: false) {
                                    HStack(spacing: 10) {
                                        ForEach(group, id: \.self) { imageIndex in
                                            VStack(spacing: 5) {
                                                Image(uiImage: selectedImages[imageIndex])
                                                    .resizable()
                                                    .aspectRatio(contentMode: .fit)
                                                    .frame(width: 80, height: 80)
                                                    .cornerRadius(8)
                                                
                                                Text("\(imageIndex + 1)")
                                                    .font(.caption2)
                                                    .foregroundColor(.secondary)
                                            }
                                        }
                                    }
                                    .padding(.horizontal)
                                }
                            }
                            .padding()
                            .background(Color.gray.opacity(0.1))
                            .cornerRadius(10)
                        }
                    }
                }
            }
            .padding()
        }
        .onChange(of: selectedItems) { _, newItems in
            Task {
                var newImages: [UIImage] = []
                for item in newItems {
                    if let data = try? await item.loadTransferable(type: Data.self),
                       let image = UIImage(data: data) {
                        newImages.append(image)
                    }
                }
                selectedImages = newImages
                embeddingService.embeddings = []
                similarGroups = []
            }
        }
    }
    
    // MARK: - Helper Functions
    
    private func generateEmbeddings() {
        isGeneratingEmbeddings = true
        
        Task {
            _ = await embeddingService.generateEmbeddings(from: selectedImages)
            
            await MainActor.run {
                isGeneratingEmbeddings = false
            }
        }
    }
    
    private func findSimilarImages() {
        guard !selectedImages.isEmpty else { return }
        
        isSearchingSimilar = true
        similarGroups = []
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            print("üîç –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏...")
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            if self.embeddingService.useClustering {
                // –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é
                var allGroups: [[Int]] = []
                
                for i in 0..<self.selectedImages.count {
                    let groups = self.embeddingService.getSimilarImageGroups(
                        for: i,
                        similarityThreshold: 0.7
                    )
                    
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ImageGroup –≤ –ø—Ä–æ—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã –∏–Ω–¥–µ–∫—Å–æ–≤
                    for group in groups {
                        let indices = group.images.map { $0.embedding.imageIndex }
                        if indices.count > 1 {
                            allGroups.append(indices)
                        }
                    }
                }
                
                // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –≥—Ä—É–ø–ø—ã
                self.similarGroups = self.mergeDuplicateGroups(allGroups)
            } else {
                // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É
                var groups: [[Int]] = []
                var used: Set<Int> = []
                let similarityThreshold: Float = 0.7
                
                for i in 0..<self.selectedImages.count {
                    if used.contains(i) { continue }
                    
                    var currentGroup: [Int] = [i]
                    used.insert(i)
                    
                    for j in (i+1)..<self.selectedImages.count {
                        if used.contains(j) { continue }
                        
                        let similarity = self.embeddingService.compareEmbeddings(
                            self.embeddingService.embeddings[i],
                            self.embeddingService.embeddings[j]
                        )
                        
                        if similarity >= similarityThreshold {
                            currentGroup.append(j)
                            used.insert(j)
                        }
                    }
                    
                    if currentGroup.count > 1 {
                        groups.append(currentGroup)
                    }
                }
                
                self.similarGroups = groups
            }
            
            self.isSearchingSimilar = false
            print("‚úÖ –ù–∞–π–¥–µ–Ω–æ \(self.similarGroups.count) –≥—Ä—É–ø–ø –ø–æ—Ö–æ–∂–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        }
    }
    
    private func mergeDuplicateGroups(_ groups: [[Int]]) -> [[Int]] {
        var mergedGroups: [Set<Int>] = []
        
        for group in groups {
            let groupSet = Set(group)
            var merged = false
            
            for i in 0..<mergedGroups.count {
                if !mergedGroups[i].isDisjoint(with: groupSet) {
                    mergedGroups[i] = mergedGroups[i].union(groupSet)
                    merged = true
                    break
                }
            }
            
            if !merged {
                mergedGroups.append(groupSet)
            }
        }
        
        return mergedGroups.map { Array($0).sorted() }.filter { $0.count > 1 }
    }
}

#Preview {
    VStack(spacing: 20) {
        Text("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            .font(.largeTitle)
            .fontWeight(.bold)
        
        Text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            .font(.headline)
            .foregroundColor(.primary)
        
        Button("–í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–æ 20)") {
            // –î–µ–π—Å—Ç–≤–∏–µ
        }
        .font(.headline)
        .foregroundColor(.white)
        .padding()
        .background(Color.blue)
        .cornerRadius(10)
        
        Text("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")
            .font(.subheadline)
            .foregroundColor(.secondary)
            .padding()
        
        Text("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é")
            .font(.caption)
            .foregroundColor(.secondary)
            .multilineTextAlignment(.center)
    }
    .padding()
}
