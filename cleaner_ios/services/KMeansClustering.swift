import Foundation

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ K-Means –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
class KMeansClustering {
    
    // MARK: - –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    /// –ö–ª–∞—Å—Ç–µ—Ä–∏–∑—É–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ —Å –ø–æ–º–æ—â—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ K-Means
    static func clusterEmbeddings(_ embeddings: [IndexedEmbedding], config: ClusteringConfig = .default) -> [Cluster] {
        guard !embeddings.isEmpty else { return [] }
        guard embeddings.count >= config.k else {
            // –ï—Å–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –º–µ–Ω—å—à–µ —á–µ–º –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, —Å–æ–∑–¥–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∫–ª–∞—Å—Ç–µ—Ä—É –Ω–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥
            return createSingleEmbeddingClusters(embeddings)
        }
        
        let startTime = Date()
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é \(embeddings.count) —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –Ω–∞ \(config.k) –∫–ª–∞—Å—Ç–µ—Ä–æ–≤...")
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
        var centroids = initializeCentroids(embeddings, k: config.k)
        var clusters: [Cluster] = []
        var previousCentroids: [[Float]] = []
        var iteration = 0
        
        repeat {
            iteration += 1
            previousCentroids = centroids.map { $0 }
            
            // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∫ –±–ª–∏–∂–∞–π—à–∏–º —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞–º
            clusters = assignEmbeddingsToClusters(embeddings, centroids: centroids)
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤
            centroids = updateCentroids(clusters)
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            let converged = checkConvergence(previousCentroids, centroids, threshold: config.convergenceThreshold)
            
            print("üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è \(iteration): —Å–æ–∑–¥–∞–Ω–æ \(clusters.count) –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
            
            if converged || iteration >= config.maxIterations {
                break
            }
            
        } while true
        
        let clusteringTime = Date().timeIntervalSince(startTime)
        print("‚úÖ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ \(String(format: "%.2f", clusteringTime)) —Å–µ–∫—É–Ω–¥")
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: \(ClusteringStats(totalEmbeddings: embeddings.count, clusters: clusters, clusteringTime: clusteringTime))")
        
        return clusters
    }
    
    // MARK: - –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    /// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä—ã –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –º–µ–Ω—å—à–µ —á–µ–º k
    private static func createSingleEmbeddingClusters(_ embeddings: [IndexedEmbedding]) -> [Cluster] {
        return embeddings.map { embedding in
            var cluster = Cluster(centroid: embedding.embedding)
            cluster.embeddings = [embedding]
            return cluster
        }
    }
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–Ω—Ç—Ä–æ–∏–¥—ã —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
    private static func initializeCentroids(_ embeddings: [IndexedEmbedding], k: Int) -> [[Float]] {
        guard !embeddings.isEmpty else { return [] }
        
        let embeddingDimension = embeddings[0].embedding.count
        var centroids: [[Float]] = []
        
        // –í—ã–±–∏—Ä–∞–µ–º k —Å–ª—É—á–∞–π–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä–æ–∏–¥—ã
        let shuffledEmbeddings = embeddings.shuffled()
        for i in 0..<min(k, shuffledEmbeddings.count) {
            centroids.append(shuffledEmbeddings[i].embedding)
        }
        
        return centroids
    }
    
    /// –ù–∞–∑–Ω–∞—á–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∫ –±–ª–∏–∂–∞–π—à–∏–º —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞–º
    private static func assignEmbeddingsToClusters(_ embeddings: [IndexedEmbedding], centroids: [[Float]]) -> [Cluster] {
        var clusters: [Cluster] = []
        
        // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã
        for (index, centroid) in centroids.enumerated() {
            var cluster = Cluster(centroid: centroid)
            cluster.embeddings = []
            clusters.append(cluster)
        }
        
        // –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞–∂–¥—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥ –∫ –±–ª–∏–∂–∞–π—à–µ–º—É —Ü–µ–Ω—Ç—Ä–æ–∏–¥—É
        for embedding in embeddings {
            let nearestCentroidIndex = findNearestCentroid(embedding.embedding, centroids: centroids)
            if nearestCentroidIndex < clusters.count {
                clusters[nearestCentroidIndex].embeddings.append(embedding)
            }
        }
        
        return clusters
    }
    
    /// –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–π —Ü–µ–Ω—Ç—Ä–æ–∏–¥ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
    private static func findNearestCentroid(_ embedding: [Float], centroids: [[Float]]) -> Int {
        var minDistance = Float.greatestFiniteMagnitude
        var nearestIndex = 0
        
        for (index, centroid) in centroids.enumerated() {
            let distance = calculateEuclideanDistance(embedding, centroid)
            if distance < minDistance {
                minDistance = distance
                nearestIndex = index
            }
        }
        
        return nearestIndex
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—Ç—Ä–æ–∏–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö
    private static func updateCentroids(_ clusters: [Cluster]) -> [[Float]] {
        return clusters.map { cluster in
            guard !cluster.embeddings.isEmpty else { return cluster.centroid }
            
            let embeddingDimension = cluster.embeddings[0].embedding.count
            var newCentroid = [Float](repeating: 0, count: embeddingDimension)
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –≤—Å–µ—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
            for embedding in cluster.embeddings {
                for i in 0..<embeddingDimension {
                    newCentroid[i] += embedding.embedding[i]
                }
            }
            
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            let count = Float(cluster.embeddings.count)
            for i in 0..<embeddingDimension {
                newCentroid[i] /= count
            }
            
            return newCentroid
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    private static func checkConvergence(_ previousCentroids: [[Float]], _ currentCentroids: [[Float]], threshold: Float) -> Bool {
        guard previousCentroids.count == currentCentroids.count else { return false }
        
        for (prev, curr) in zip(previousCentroids, currentCentroids) {
            let distance = calculateEuclideanDistance(prev, curr)
            if distance > threshold {
                return false
            }
        }
        
        return true
    }
    
    /// –í—ã—á–∏—Å–ª—è–µ—Ç –µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è –≤–µ–∫—Ç–æ—Ä–∞–º–∏
    private static func calculateEuclideanDistance(_ vector1: [Float], _ vector2: [Float]) -> Float {
        guard vector1.count == vector2.count else { return Float.greatestFiniteMagnitude }
        
        var sum: Float = 0
        for i in 0..<vector1.count {
            let diff = vector1[i] - vector2[i]
            sum += diff * diff
        }
        
        return sqrt(sum)
    }
    
    /// –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –º–µ–∂–¥—É –¥–≤—É–º—è –≤–µ–∫—Ç–æ—Ä–∞–º–∏
    static func calculateCosineSimilarity(_ vector1: [Float], _ vector2: [Float]) -> Float {
        guard vector1.count == vector2.count else { return 0.0 }
        
        var dotProduct: Float = 0.0
        var norm1: Float = 0.0
        var norm2: Float = 0.0
        
        for i in 0..<vector1.count {
            dotProduct += vector1[i] * vector2[i]
            norm1 += vector1[i] * vector1[i]
            norm2 += vector2[i] * vector2[i]
        }
        
        let magnitude1 = sqrt(norm1)
        let magnitude2 = sqrt(norm2)
        
        guard magnitude1 > 0 && magnitude2 > 0 else { return 0.0 }
        
        return dotProduct / (magnitude1 * magnitude2)
    }
}
