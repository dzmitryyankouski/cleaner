import Foundation
import Combine

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
class ClusterIndexService: ObservableObject {
    
    // MARK: - Published Properties
    
    @Published var clusters: [Cluster] = []
    @Published var indexedEmbeddings: [IndexedEmbedding] = []
    @Published var clusteringStats: ClusteringStats?
    @Published var isClustering = false
    @Published var lastClusteringDate: Date?
    
    // MARK: - Private Properties
    
    private var clusteringConfig: ClusteringConfig = .default
    private var searchCache: [String: [SimilarityResult]] = [:]
    private let cacheExpirationTime: TimeInterval = 300 // 5 –º–∏–Ω—É—Ç
    
    // MARK: - Initialization
    
    init() {
        print("üîç ClusterIndexService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    }
    
    // MARK: - Public Methods
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä—ã
    func addEmbeddings(_ embeddings: [[Float]], imageIndices: [Int]) async {
        guard !embeddings.isEmpty else { return }
        
        print("üì• –î–æ–±–∞–≤–ª—è–µ–º \(embeddings.count) –Ω–æ–≤—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        let newIndexedEmbeddings = zip(embeddings, imageIndices).map { embedding, imageIndex in
            IndexedEmbedding(embedding: embedding, imageIndex: imageIndex)
        }
        
        await MainActor.run {
            self.indexedEmbeddings.append(contentsOf: newIndexedEmbeddings)
        }
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã
        await performClustering()
    }
    
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    func performClustering() async {
        guard !indexedEmbeddings.isEmpty else {
            print("‚ö†Ô∏è –ù–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")
            return
        }
        
        await MainActor.run {
            self.isClustering = true
        }
        
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é \(indexedEmbeddings.count) —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        
        let newClusters = await Task.detached {
            KMeansClustering.clusterEmbeddings(self.indexedEmbeddings, config: self.clusteringConfig)
        }.value
        
        await MainActor.run {
            self.clusters = newClusters
            self.isClustering = false
            self.lastClusteringDate = Date()
            self.clusteringStats = ClusteringStats(
                totalEmbeddings: self.indexedEmbeddings.count,
                clusters: newClusters,
                clusteringTime: 0 // –í—Ä–µ–º—è –±—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–æ –≤ KMeansClustering
            )
            
            // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
            self.searchCache.removeAll()
            
            print("‚úÖ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–æ \(newClusters.count) –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
        }
    }
    
    /// –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    func findSimilarEmbeddings(to queryEmbedding: [Float], 
                              maxResults: Int = 10, 
                              similarityThreshold: Float = 0.5) -> [SimilarityResult] {
        
        guard !clusters.isEmpty else {
            print("‚ö†Ô∏è –ö–ª–∞—Å—Ç–µ—Ä—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return findSimilarEmbeddingsBruteForce(queryEmbedding, maxResults: maxResults, similarityThreshold: similarityThreshold)
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        let cacheKey = "\(queryEmbedding.hashValue)_\(maxResults)_\(similarityThreshold)"
        if let cachedResults = searchCache[cacheKey],
           Date().timeIntervalSince(lastClusteringDate ?? Date.distantPast) < cacheExpirationTime {
            print("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
            return Array(cachedResults.prefix(maxResults))
        }
        
        print("üîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ \(clusters.count) –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö...")
        
        // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –∫–ª–∞—Å—Ç–µ—Ä
        let nearestCluster = findNearestCluster(queryEmbedding)
        
        // –ò—â–µ–º –≤ –±–ª–∏–∂–∞–π—à–µ–º –∫–ª–∞—Å—Ç–µ—Ä–µ –∏ —Å–æ—Å–µ–¥–Ω–∏—Ö
        var candidates: [SimilarityResult] = []
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
        candidates.append(contentsOf: searchInCluster(nearestCluster, queryEmbedding: queryEmbedding, similarityThreshold: similarityThreshold))
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        let neighborClusters = findNeighborClusters(nearestCluster, queryEmbedding: queryEmbedding, maxNeighbors: 2)
        for cluster in neighborClusters {
            candidates.append(contentsOf: searchInCluster(cluster, queryEmbedding: queryEmbedding, similarityThreshold: similarityThreshold))
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ö–æ–¥—Å—Ç–≤—É –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        let results = candidates
            .sorted { $0.similarity > $1.similarity }
            .prefix(maxResults)
            .map { $0 }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        searchCache[cacheKey] = Array(results)
        
        print("‚úÖ –ù–∞–π–¥–µ–Ω–æ \(results.count) –ø–æ—Ö–æ–∂–∏—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
        return Array(results)
    }
    
    /// –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –ø–æ–ª–Ω—ã–º –ø–µ—Ä–µ–±–æ—Ä–æ–º (fallback)
    private func findSimilarEmbeddingsBruteForce(_ queryEmbedding: [Float], 
                                               maxResults: Int, 
                                               similarityThreshold: Float) -> [SimilarityResult] {
        print("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª–Ω—ã–º –ø–µ—Ä–µ–±–æ—Ä–æ–º...")
        
        var results: [SimilarityResult] = []
        
        for embedding in indexedEmbeddings {
            let similarity = KMeansClustering.calculateCosineSimilarity(queryEmbedding, embedding.embedding)
            if similarity >= similarityThreshold {
                results.append(SimilarityResult(embedding: embedding, similarity: similarity, clusterId: embedding.clusterId))
            }
        }
        
        return results
            .sorted { $0.similarity > $1.similarity }
            .prefix(maxResults)
            .map { $0 }
    }
    
    /// –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–π –∫–ª–∞—Å—Ç–µ—Ä –∫ –∑–∞–ø—Ä–æ—Å—É
    private func findNearestCluster(_ queryEmbedding: [Float]) -> Cluster {
        var minDistance = Float.greatestFiniteMagnitude
        var nearestCluster = clusters[0]
        
        for cluster in clusters {
            let distance = calculateEuclideanDistance(queryEmbedding, cluster.centroid)
            if distance < minDistance {
                minDistance = distance
                nearestCluster = cluster
            }
        }
        
        return nearestCluster
    }
    
    /// –ù–∞—Ö–æ–¥–∏—Ç —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä—ã
    private func findNeighborClusters(_ referenceCluster: Cluster, 
                                    queryEmbedding: [Float], 
                                    maxNeighbors: Int) -> [Cluster] {
        var clusterDistances: [(Cluster, Float)] = []
        
        for cluster in clusters {
            if cluster.id != referenceCluster.id {
                let distance = calculateEuclideanDistance(queryEmbedding, cluster.centroid)
                clusterDistances.append((cluster, distance))
            }
        }
        
        return clusterDistances
            .sorted { $0.1 < $1.1 }
            .prefix(maxNeighbors)
            .map { $0.0 }
    }
    
    /// –ò—â–µ—Ç –ø–æ—Ö–æ–∂–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–ª–∞—Å—Ç–µ—Ä–µ
    private func searchInCluster(_ cluster: Cluster, 
                               queryEmbedding: [Float], 
                               similarityThreshold: Float) -> [SimilarityResult] {
        var results: [SimilarityResult] = []
        
        for embedding in cluster.embeddings {
            let similarity = KMeansClustering.calculateCosineSimilarity(queryEmbedding, embedding.embedding)
            if similarity >= similarityThreshold {
                results.append(SimilarityResult(embedding: embedding, similarity: similarity, clusterId: cluster.id))
            }
        }
        
        return results
    }
    
    /// –í—ã—á–∏—Å–ª—è–µ—Ç –µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è –≤–µ–∫—Ç–æ—Ä–∞–º–∏
    private func calculateEuclideanDistance(_ vector1: [Float], _ vector2: [Float]) -> Float {
        guard vector1.count == vector2.count else { return Float.greatestFiniteMagnitude }
        
        var sum: Float = 0
        for i in 0..<vector1.count {
            let diff = vector1[i] - vector2[i]
            sum += diff * diff
        }
        
        return sqrt(sum)
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
    func updateClusteringConfig(_ config: ClusteringConfig) {
        clusteringConfig = config
        print("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: k=\(config.k), maxIterations=\(config.maxIterations)")
    }
    
    /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    func clearAll() {
        clusters = []
        indexedEmbeddings = []
        clusteringStats = nil
        lastClusteringDate = nil
        searchCache.removeAll()
        print("üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã")
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
    func getClusteringStats() -> ClusteringStats? {
        return clusteringStats
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    func getClusterCount() -> Int {
        return clusters.count
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    func getTotalEmbeddingsCount() -> Int {
        return indexedEmbeddings.count
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –≥—Ä—É–ø–ø—ã –ø–æ—Ö–æ–∂–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
    func getImageGroups(for queryEmbedding: [Float], similarityThreshold: Float = 0.5) -> [ImageGroup] {
        guard !clusters.isEmpty else {
            print("‚ö†Ô∏è –ö–ª–∞—Å—Ç–µ—Ä—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return []
        }
        
        print("üîç –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞...")
        
        var groups: [ImageGroup] = []
        
        // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –∫–ª–∞—Å—Ç–µ—Ä
        let nearestCluster = findNearestCluster(queryEmbedding)
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
        let nearestGroupResults = searchInCluster(nearestCluster, queryEmbedding: queryEmbedding, similarityThreshold: similarityThreshold)
        if !nearestGroupResults.isEmpty {
            let averageSimilarity = nearestGroupResults.map { $0.similarity }.reduce(0, +) / Float(nearestGroupResults.count)
            let group = ImageGroup(
                id: nearestCluster.id,
                title: "–ö–ª–∞—Å—Ç–µ—Ä \(clusters.firstIndex(where: { $0.id == nearestCluster.id }) ?? 0) + 1",
                images: nearestGroupResults,
                averageSimilarity: averageSimilarity,
                clusterId: nearestCluster.id
            )
            groups.append(group)
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        let neighborClusters = findNeighborClusters(nearestCluster, queryEmbedding: queryEmbedding, maxNeighbors: 2)
        for (index, cluster) in neighborClusters.enumerated() {
            let clusterResults = searchInCluster(cluster, queryEmbedding: queryEmbedding, similarityThreshold: similarityThreshold)
            if !clusterResults.isEmpty {
                let averageSimilarity = clusterResults.map { $0.similarity }.reduce(0, +) / Float(clusterResults.count)
                let group = ImageGroup(
                    id: cluster.id,
                    title: "–°–æ—Å–µ–¥–Ω–∏–π –∫–ª–∞—Å—Ç–µ—Ä \(index + 1)",
                    images: clusterResults,
                    averageSimilarity: averageSimilarity,
                    clusterId: cluster.id
                )
                groups.append(group)
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —Å—Ö–æ–¥—Å—Ç–≤—É
        groups.sort { $0.averageSimilarity > $1.averageSimilarity }
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω–æ \(groups.count) –≥—Ä—É–ø–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return groups
    }
}
